[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Citi-Bike NYC Data Viz",
    "section": "",
    "text": "1 Introduction\nAfter launching its initial fleet of 6,000 bikes across 300 stations in 2013, Citi Bike has since transformed the streets of New York City in many lasting ways. Today, Citi Bike is the largest bike share system in the United States, approaching 30,000 bikes and 2,000 stations across New York City, Jersey City, and Hoboken, New Jersey. \nWith around 3.7 million rides in October 2023, ridership is up approximately 30% compared to the same time last year and almost 75% compared to pre-pandemic levels in October 2019. As ridership demand and growth continue to reach new highs, Citi Bike and New York City are responding by introducing plans for expansions and improvements to the system. On November 3, 2023, Mayor Eric Adams and New York City Department of Transportation Commissioner Ydanis Rodriques announced plans to significantly expand Citi Bike services by the end of next year. These plans include doubling the number of electric bikes at its stations and electrifying 20% of its existing stations.\nThis year the city is celebrating 10 years of the bike-sharing program that changed New York City's transportation landscape, infrastructure, culture, and accessibility. As Citi Bike continues to establish itself as an indispensable service and vital component of the city's transportation network, ensuring its reliability and equity is key to securing the program's success in the long run. This project will examine Citi Bike's growth throughout the years, exploring demand across stations, seasons, days, and neighborhoods, to identify notable trends across these variables. \n\nSome specific questions we are interested in include:\n\nHow has Citi Bike ridership grown since launch?\nWhere did Citi Bike stations expand to over the years?\nHow does average hourly flow differ across years, months, seasons, and weekdays?\nHow does average hourly net flow differ across years, months, seasons, and weekdays?\nHow does average hourly flow and net flow differ across neighborhoods in New York?"
  },
  {
    "objectID": "data.html#technical-description",
    "href": "data.html#technical-description",
    "title": "2  Data",
    "section": "2.1 Technical Description",
    "text": "2.1 Technical Description\nData Sources and Collection\nOur project primarily utilizes data from Citi Bike New York’s bike sharing system. The data, accessible via Citi Bike’s system data and its Live API, encompasses a comprehensive record of bike usage. We have collected all available data from the year 2013 to the present, amassing over 64 GB of raw data, downloading from their bulk data website, and process it in batches and merging various batches into bigger ones due to computational power constraints.\n\nData Collection Method and Responsible Entity:\n\nCiti Bike, operated by NYC Bike Share LLC, a subsidiary of Lyft Inc, collects the data​​.\nThe data collection method isn’t specified in their monthly analysis reports, however it likely obtained through the combination of Citi-Bike app (through Customer Usage) with GPS input embedded on the app, bike and dock tracking sensors each station has. The data includes real-time program data, ensuring current and relevant information​​.\nAPI data showing current station capacities and status are updated every 5 seconds, while their bulk data showing bike transactions every first day of the month for the past month.\n\nData Processing and Format\nTo facilitate our analysis, we developed a custom data processing tool that converts raw data into a structured format suitable for time-series analysis. This process involved tracking hourly inflow and outflow at each of Citi Bike’s 2500+ stations. Our final data-set consists of monthly data frames, each representing around 720 hours (24 hours x 30 days) across all 2500 stations, thus offering a detailed view of bike station usage over time, and we have collected data for 130 months. The data is structured with time (dates for each hour since 2013 until end of October 2023) on the rows and station names on the columns, with each cell indicating the inflow at a specific station and time.\n\n\n\n\n\n\nLive API Integration\nAdditionally, we are leveraging the Live API to monitor real-time station capacities and bike availability, which provides valuable insights into current usage patterns and station dynamics.\nKnown Data Issues\nOne of the challenges we’ve encountered is ensuring the accuracy and completeness of the historical data, particularly in the context of station additions, removals, and capacity changes over time. These factors can significantly impact time-series analysis and trend interpretation. We have only kept columns (stations names) that were consistent over the time-frame of our analysis.\nData Importation\nData importation is performed through automated scripts that fetch and process data from both the static data-sets and the Live API, ensuring consistent and up-to-date information flow into our analysis pipeline."
  },
  {
    "objectID": "data.html#research-plan",
    "href": "data.html#research-plan",
    "title": "2  Data",
    "section": "2.2 Research Plan",
    "text": "2.2 Research Plan\nLinking Data to Research Questions\nOur research seeks to uncover and visualize trends in bike-sharing usage across various regions and stations in New York City over time. The structured time-series data enables us to conduct comprehensive analyses, such as identifying peak usage times, understanding seasonal variations, and detecting long-term usage trends.\nUtilizing Visualizations\nThe attached visualization exemplifies our approach. It displays the average hourly inflow traffic frequency at Citi Bike stations since 2013, offering insights into the spatial and temporal patterns of bike usage in New York City. We would like to dig into these patterns and explore how the frequency of usage got affected by time.\n\n\n\n\n\nAnalyzing Live Data\nIncorporating real-time data from the Live API allows us to extend our analysis to current usage patterns, further enriching our understanding of the system’s dynamics and assisting in predictive modeling for future trends.\nThis data-driven approach provides a robust foundation for answering our core research questions about the usage patterns of New York City’s bike-sharing system and contributes to a deeper understanding of urban mobility."
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.3 Missing Value Analysis",
    "text": "2.3 Missing Value Analysis\nIn our analysis of the Ci-ti Bike data, we focus on the transformation of raw transaction data into a more aggregated and analyzable format. Each transaction in the dataset represents a discrete bike usage event, with details such as time, location, and duration. To construct a meaningful analysis framework, we aggregate these individual transactions into hourly inflow counts for each station.\nCharacteristics of Raw Data:\n\nThe raw data is transactional, with each entry representing a distinct bike usage event.\nThis dataset does not contain any ‘NA’ values, indicating a comprehensive record of all transactions recorded by the system.\n\nTransformation Process:\n\nWe process this data by summing and filtering transactions to attain an hourly inflow count per station.\nThis aggregation smoothens the data for time-series analysis, focusing on broader usage trends rather than individual transactions.\n\nChallenges in Missing Data Identification:\n\nA critical limitation of this approach is the inability to distinguish between a non-recorded transaction and a genuine absence of transactions. If a bike is used but the transaction is not recorded due to any system error, it is indistinguishable from a time frame where no bike usage occurred.\nConsequently, as data analysts, we cannot definitively assert whether a gap in the data is due to a recording failure or actual inactivity.\n\nObservations of Missing Data:\n\nUpon reducing the transaction data from a per-second basis to an hourly format, we observed gaps in the data, where certain dates appear to be skipped.\nThese missing values could represent days with extremely low or no activity at specific stations, or they might indicate periods where data was not recorded or collected due to technical issues.\n\n\nAlthough there is no documented explanation for the clusters of missing data, our team has hypothesized potential reasons for these gaps, though no clear pattern of missing data is evident.\n\nRegion 1 (as shown in the image below) aligns with the lock-down period in New York City during the COVID-19 pandemic, particularly through the summer months. This period likely is missing due to bike usage restrictions due to public health restrictions and changes in commuting patterns, potentially resulting in sparse data during this period.\nRegion 2, while not technically missing data, represents a period where data is unavailable due to its coincidence with the “leap day” in February, which occurs every four years. This absence is likely a result of the dataset’s structure, which may not account for this quadrennial variation in the calendar.\nRegion 3 presents a more elusive case. Our research has not uncovered a formal explanation for this data gap. However, the fact that these missing data points consistently occur during winter months leads us to speculate that it might be related to seasonal factors. The hypothesis is that this period could correspond to times when Citi Bike operations are impacted by heavy snow or routine maintenance closures, leading to reduced activity or data recording."
  },
  {
    "objectID": "results.html#data-set-up-and-prep",
    "href": "results.html#data-set-up-and-prep",
    "title": "3  Results",
    "section": "3.1 Data Set up and Prep",
    "text": "3.1 Data Set up and Prep\n\n3.1.1 Load Libraries\n\n\nCode\nlibrary(ggplot2)\nlibrary(purrr)\nlibrary(leaflet.extras)\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(leaflet)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(httr)\nlibrary(sf)\nlibrary(forcats)\nlibrary(gridExtra)\nlibrary(patchwork)\nlibrary(rsconnect)\nsuppressPackageStartupMessages(library(leaflet))\n\n\n\n\n3.1.2 Read in Data\n\n\nCode\n# Set the working directory to the project root (do this once per session)\n\n# Read the file using a relative path\nfile_path &lt;- \"/Users/karmaistanbouli/Desktop/Columbia-MSDS/NYC_CitiBike_Viz/⭐️Project Code/Cleaned Data p/Grouped_Data\"\n# Read \"data_by_month.rds\" into a dataframe named \"data_by_month\"\ndata_by_month &lt;- readRDS(file.path(file_path, \"data_by_month.rds\"))\n\n# Read \"data_by_year.rds\" into a dataframe named \"data_by_year\"\ndata_by_year &lt;- readRDS(file.path(file_path, \"data_by_year.rds\"))\n\n# Read \"data_by_weekdy.rds\" into a dataframe named \"data_by_weekdy\"\ndata_by_weekdy &lt;- readRDS(file.path(file_path, \"data_by_weekdy.rds\"))\n\n# Read \"data_by_season.rds\" into a dataframe named \"data_by_season\"\ndata_by_season &lt;- readRDS(file.path(file_path, \"data_by_season.rds\"))\n\ndata_by_day &lt;- readRDS(file.path(file_path, \"data_by_day.rds\"))\n\n\n\n\n3.1.3 Add Net Flow and Total Flow Columns\n\n\nCode\ndata_by_year &lt;- data_by_year %&gt;%\n  mutate(total_flow = inflow + outflow,\n         net_flow = inflow - outflow)\n\ndata_by_month &lt;- data_by_month %&gt;%\n  mutate(total_flow = inflow + outflow,\n         net_flow = inflow - outflow)\n\ndata_by_weekdy &lt;- data_by_weekdy %&gt;%\n  mutate(total_flow = inflow + outflow,\n         net_flow = inflow - outflow)\n\ndata_by_day &lt;- data_by_day %&gt;%\n  mutate(total_flow = inflow + outflow,\n         net_flow = inflow - outflow)\n\ndata_by_season &lt;- data_by_season %&gt;%\n  mutate(total_flow = inflow + outflow,\n         net_flow = inflow - outflow)\n\n\n\n\n3.1.4 Fetch the Live data to get Station Info\n\n\nCode\nfetch_bike_data &lt;- function(api_url) {\n  # Sending a GET request to the API\n  response &lt;- GET(api_url)\n  \n  # Checking the status of the response\n  if (status_code(response) == 200) {\n    # Parsing the content of the response to a list\n    api_data &lt;- content(response, \"parsed\")\n  } else {\n    cat(\"Failed to retrieve data: HTTP status\", status_code(response), \"\\n\")\n    return(NULL)\n  }\n  \n  station_raw &lt;- api_data$data$stations\n  \n  # Transforming the nested list into a dataframe\n  databike_raw &lt;- map_dfr(station_raw, ~flatten_df(as.data.frame(.x)))\n  \n  return(databike_raw)\n}\n\nurl &lt;- \"https://gbfs.lyft.com/gbfs/2.3/bkn/en/station_information.json\"\ndatabike_raw&lt;- fetch_bike_data(url)\napi_dict &lt;- subset(databike_raw, select = c(\"name\", \"lat\", \"lon\", \"capacity\"))\n\n\n\n\n3.1.5 Creating Function to Add Station Info to DF\n\n\nCode\n#function to add station info from api to dataframe\n\nadd_station_info &lt;- function(df, api_dict) {\n  \n# Convert station_info_dict to a dataframe\n  \n# Convert lon, lat, and capacity to numeric\n  \n  api_dict[, c(\"lon\", \"lat\", \"capacity\")] &lt;- lapply(api_dict[, c(\"lon\", \"lat\", \"capacity\")], as.numeric)\n  \n# Merge df with station_info_df based on station name\n  result &lt;- left_join(df, api_dict, by = c(\"variable\" = \"name\"))\n  \n  \n# Return the result\n  return(result)\n}\n\n\n\n\n3.1.6 Merge Melted Data with Station Information\n\n\nCode\n# joining station info from api to each dataframe\n\ndata_by_year$variable &lt;- as.character(data_by_year$variable)\ndata_by_month$variable &lt;- as.character(data_by_month$variable)\ndata_by_season$variable &lt;- as.character(data_by_season$variable)\ndata_by_weekdy$variable &lt;- as.character(data_by_weekdy$variable)\n\ndata_by_year$year &lt;- as.numeric(data_by_year$year)\ndata_by_month$month &lt;- as.numeric(data_by_month$month)\n\n# joining data by year with api data using function\ndata_by_year_join &lt;- add_station_info(data_by_year, api_dict)\n\ndata_by_month_join &lt;- add_station_info(data_by_month, api_dict)\n\ndata_by_weekdy_join &lt;- add_station_info(data_by_weekdy, api_dict)\n\ndata_by_season_join &lt;- add_station_info(data_by_season, api_dict)\n\ndata_by_day_join &lt;- add_station_info(data_by_day, api_dict)\n\ndata_by_day_join$day &lt;- as.Date(data_by_day_join$day, format = \"%Y-%m-%d\")\n\n\n#Changing lon lat to numeric\ndata_by_year_join$lat &lt;- as.numeric(data_by_year_join$lat)\ndata_by_year_join$lon &lt;- as.numeric(data_by_year_join$lon)\n\ndata_by_month_join$lat &lt;- as.numeric(data_by_month_join$lat)\ndata_by_month_join$lon &lt;- as.numeric(data_by_month_join$lon)\n\n\n\n\n3.1.7 Function to add Neighborhood Data to Merged Data\n\n\nCode\nsuppressMessages({\n# Load GeoJSON file\nneighborhood_boundaries &lt;- st_read(\"⭐️Project Code/ny-nbhd.geoj\")\n\n# Function to perform spatial join\nadd_nbhd_info &lt;- function(data_frame) {\n  # Assuming your station data has latitude and longitude columns named \"lat\" and \"lon\"\n  stations_sf &lt;- st_as_sf(data_frame, coords = c(\"lon\", \"lat\"), crs = 4326)\n  \n  # Perform spatial join\n  joined_data &lt;- st_join(stations_sf, neighborhood_boundaries)\n  \n  return(joined_data)\n}})\n\n\nReading layer `ny-nbhd' from data source \n  `/Users/karmaistanbouli/Desktop/Columbia-MSDS/NYC_CitiBike_Viz/⭐️Project Code/ny-nbhd.geoj' \n  using driver `GeoJSON'\nSimple feature collection with 310 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -74.25559 ymin: 40.49613 xmax: -73.70001 ymax: 40.91553\nGeodetic CRS:  WGS 84\n\n\n\n\n3.1.8 Adding Neighborhood Data to Merged Data\n\n\nCode\ndata_by_month_join &lt;- data_by_month_join %&gt;%\n  filter(!is.na(lon) & !is.na(lat))\n\ndata_by_weekdy_join &lt;-data_by_weekdy_join  %&gt;%\nfilter(!is.na(lon) & !is.na(lat))\n\ndata_by_year_join &lt;- data_by_year_join %&gt;%\n  filter(!is.na(lon) & !is.na(lat))\n\ndata_by_season_join &lt;-data_by_season_join %&gt;%\nfilter(!is.na(lon) & !is.na(lat))\n\ndata_by_month_join_nbhd &lt;- add_nbhd_info(data_by_month_join)\ndata_by_year_join_nbhd &lt;- add_nbhd_info(data_by_year_join)\ndata_by_weekdy_join_nbhd &lt;- add_nbhd_info(data_by_weekdy_join)\ndata_by_season_join_nbhd &lt;- add_nbhd_info(data_by_season_join)"
  },
  {
    "objectID": "results.html#citi-bike-hourly-average-bike-flow",
    "href": "results.html#citi-bike-hourly-average-bike-flow",
    "title": "3  Results",
    "section": "3.2 Citi Bike Hourly Average Bike Flow",
    "text": "3.2 Citi Bike Hourly Average Bike Flow\nWe begin our exploration with an overview of Citi Bike’s ridership growth since its inception in 2013. In our research, we use average hourly inflow and outflow of bikes to and from stations as an indicator of ridership growth and overall demand for the bike-sharing service.\n\n3.2.1 Hourly Average Citi Bike Flow by Day\nThe following chart showcases the evolving trends in activity over the years. Each bar on the graph represents the average hourly inflow of riders across all stations on a specific day.\nWhat we observe is that average hourly inflow stayed consistent throughout the years. Although we would expect an increasing average considering the company’s booming popularity, the consistent average hourly inflow makes sense since the number of stations increased from 330 in 2013 to almost 2,000 today.\nThe chart also reveals cyclical patterns showing periodic peaks and troughs throughout the years. These cycles suggest the influence of external factors such as season, weather and day of week. Note: we discuss the visible gap in the second half of 2021 in our missing data analysis.\n\n\nCode\n# Aggregating flow data by day\n\ndata_by_day_agg &lt;- data_by_day_join %&gt;%\n  filter(total_flow != 0) %&gt;%\n  group_by(day) %&gt;%\n  summarize(\n    avg_inflow = mean(inflow, na.rm = TRUE),\n    avg_outflow = mean(outflow, na.rm = TRUE),\n    avg_netflow = mean(net_flow, na.rm = TRUE),\n    avg_totalflow = mean(total_flow, na.rm = TRUE),\n    total_inflow = sum(inflow, na.rm = TRUE),\n    total_outflow = sum(outflow, na.rm = TRUE),\n    totalflow = sum(total_flow, na.rm = TRUE)\n  )\n\n# Convert \"day\" to a date format\ndata_by_day_agg$day &lt;- as.Date(data_by_day_agg$day)\n\n\n# Creating x-axis label breaks\nbreaks &lt;- seq(min(data_by_day_agg$day), max(data_by_day_agg$day), by = \"3 month\")\n\nplot1 &lt;- ggplot(data_by_day_agg, aes(x = day, y = avg_inflow)) +\n  geom_bar(stat = \"identity\", fill = 'cornflowerblue', width = 2) +\n  labs(title = \"Average Hourly Flow by Day\",\n       x = \"Date\",\n       y = \"Flow\") +\n  theme_minimal() +\n  theme_minimal() +\n  theme(axis.title = element_text(face = \"bold\"),\n    plot.title = element_text(size = 15,\n        face = \"bold\", vjust = 0),\n    axis.text.x = element_text(angle = 45, hjust = 1))+\n  scale_fill_manual(values = c(\"avg_inflow\" = \"dodgerblue\", \"avg_outflow\" = \"mediumseagreen\"))+\n  scale_x_date(date_labels = \"%b %Y\", breaks = breaks)\n\n\nplot1\n\n\nWarning: `position_stack()` requires non-overlapping x intervals\n\n\n\n\n\nIn the chart below, we narrow our focus on days between 2017 and 2019. With this view, monthly and seasonal trends are more obvious. It is not surprising that average hourly inflow is lower in the colder month and higher in the Summer and Fall.\n\n\nCode\ndata_by_day_agg &lt;- data_by_day_agg  %&gt;%\n  filter(year(day)&gt;= 2017& year(day) &lt;= 2019)\n\nplot2 &lt;- ggplot(data_by_day_agg, aes(x = day, y = avg_totalflow)) +\n   geom_bar(stat = \"identity\", fill = \"cornflowerblue\") +\n  labs(title = \"Average Hourly Flow by Day (2017 - 2019)\",\n       x = \"Date\",\n       y = \"Flow\") +\n  theme_minimal() +\n  scale_x_date(date_labels = \"%b %Y\", date_breaks = \"5 months\")+\n  theme_minimal() +\n  theme(axis.title = element_text(face = \"bold\"),\n    plot.title = element_text(size = 15,\n        face = \"bold\", vjust = 0),\n    axis.text.x = element_text(angle = 45, hjust = 1))+\n  scale_fill_manual(values = c(\"avg_inflow\" = \"dodgerblue\", \"avg_outflow\" = \"mediumseagreen\"))\n\n\nplot2\n\n\n\n\n\n\n\n3.2.2 Citi Bike Hourly Average Flow by Month and Season\nAggregating average hourly inflow across stations by month and by season underscores these cyclical trends:\n\n\nCode\n# changing month values from 1-12 to month names\n\ndata_by_month_join &lt;- data_by_month_join %&gt;%\n  mutate(month = factor(as.integer(month), levels = 1:12, labels = month.name))\n\n# aggregating data by month\ndata_by_month_agg &lt;- data_by_month_join %&gt;%\n  filter(total_flow!= 0) %&gt;%\n  group_by(month) %&gt;%\n  summarize(\n    avg_inflow = mean(inflow, na.rm = TRUE),\n    avg_outflow = mean(outflow, na.rm = TRUE),\n    avg_netflow = mean(net_flow, na.rm = TRUE),    \n    avg_totalflow = mean(total_flow, na.rm = TRUE),\n    total_inflow = sum(inflow, na.rm = TRUE),\n    total_outflow = sum(outflow, na.rm = TRUE),\n    totalflow = sum(inflow, na.rm = TRUE)\n  )\n\n# aggregating data by season\ndata_by_season_agg &lt;- data_by_season %&gt;%\n  filter(total_flow!= 0) %&gt;%\n  group_by(season) %&gt;%\n  summarize(\n    avg_inflow = mean(inflow, na.rm = TRUE),\n    avg_outflow = mean(outflow, na.rm = TRUE),\n    avg_netflow = mean(net_flow, na.rm = TRUE),   \n    avg_totalflow = mean(total_flow, na.rm = TRUE),\n    total_inflow = sum(inflow, na.rm = TRUE),\n    total_outflow = sum(outflow, na.rm = TRUE),\n    totalflow = sum(inflow, na.rm = TRUE)\n  )\n\n# pivot longer to get flow types (inflow/outflow)\n\navg_by_month_long &lt;- data_by_month_agg %&gt;%\n  pivot_longer(cols = c(\"avg_inflow\", \"avg_outflow\"), names_to = \"flow_type\", values_to = \"avg_flow\")\n\navg_by_season_long &lt;- data_by_season_agg %&gt;%\n  pivot_longer(cols = c(\"avg_inflow\", \"avg_outflow\"), names_to = \"flow_type\", values_to = \"avg_flow\")\n\nplot4 &lt;- avg_by_month_long %&gt;%\n  ggplot(aes(x = month, y = avg_flow, fill = flow_type)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Hourly Flow by Month\",\n       x = \"Month\",\n       y = \"Average Hourly Flow\") +\n  theme_minimal() +\n  theme(axis.title = element_text(face = \"bold\"),\n    plot.title = element_text(size = 15,\n        face = \"bold\", vjust = 0),\n    axis.text.x = element_text(angle = 45, hjust = 1))+\n  scale_fill_manual(values = c(\"avg_inflow\" = \"dodgerblue\", \"avg_outflow\" = \"mediumseagreen\"))\n\n\nplot5 &lt;- avg_by_season_long %&gt;%\n  ggplot(aes(x = season, y = avg_flow, fill = flow_type)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Hourly Flow by Season\",\n       x = \"Season\",\n       y = \"Average Hourly Flow\") +\n theme_minimal() +\n  theme(axis.title = element_text(face = \"bold\"),\n    plot.title = element_text(size = 15,\n        face = \"bold\", vjust = 0),\n    axis.text.x = element_text(angle = 45, hjust = 1))+\n  scale_fill_manual(values = c(\"avg_inflow\" = \"dodgerblue\", \"avg_outflow\" = \"mediumseagreen\"))\n\n\nmonth_season_flow &lt;- plot4 + plot5 +\n  plot_layout(ncol = 2, guides = 'collect', widths = c(1, 1)) & \n  theme(legend.position = 'right', legend.box = 'horizontal', legend.direction = 'vertical')\n\n\nprint(month_season_flow)\n\n\n\n\n\n\n\n3.2.3 Citi Bike Hourly Average Flow by Day of Week\nWe can also aggregate by day of week to see how average hourly inflow differs across different days of the week. Trends are not very obvious here but we can still see that ridership is higher on weekdays, unexpectedly:\n\n\nCode\n# changing days from 1-7 to actual day names\n\ndata_by_weekday &lt;- data_by_weekdy %&gt;%\n  filter(total_flow!= 0) %&gt;%\n  mutate(\n    weekday = factor(weekday, levels = c(\"Sunday\",\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"))\n  )\n\n# aggregating data by day of week\n\ndata_by_weekdy_agg &lt;- data_by_weekdy %&gt;%\n  group_by(weekday) %&gt;%\n  summarize(\n    avg_inflow = mean(inflow, na.rm = TRUE),\n    avg_outflow = mean(outflow, na.rm = TRUE),\n    avg_netflow = mean(net_flow, na.rm = TRUE),\n    avg_totalflow = mean(total_flow, na.rm = TRUE),\n    total_inflow = sum(inflow, na.rm = TRUE),\n    total_outflow = sum(outflow, na.rm = TRUE),\n    totalflow = sum(inflow, na.rm = TRUE)\n  )\n\n#pivot longer\navg_by_weekdy_long &lt;- data_by_weekdy_agg %&gt;%\n  pivot_longer(cols = c(\"avg_inflow\", \"avg_outflow\"), names_to = \"flow_type\", values_to = \"avg_flow\")\n\n# reorder the days of the week\navg_by_weekdy_long$weekday &lt;- fct_relevel(avg_by_weekdy_long$weekday, \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\")\n\nplot6 &lt;- avg_by_weekdy_long %&gt;%\n  ggplot(aes(x = weekday, y = avg_flow, fill = flow_type)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Daily Flow by Day of Week\",\n       x = \"Day\",\n       y = \"Average Daily Flow\") +\n  theme_minimal() +\n    theme(axis.title = element_text(face = \"bold\"),\n    plot.title = element_text(size = 15,\n        face = \"bold\", vjust = 0)) +\n  scale_fill_manual(values = c(\"avg_inflow\" = \"dodgerblue\", \"avg_outflow\" = \"forestgreen\"))\n\nplot6"
  },
  {
    "objectID": "results.html#citi-bike-hourly-average-bike-net-flow",
    "href": "results.html#citi-bike-hourly-average-bike-net-flow",
    "title": "3  Results",
    "section": "3.3 Citi Bike Hourly Average Bike Net Flow",
    "text": "3.3 Citi Bike Hourly Average Bike Net Flow\nNow that we have seen how average hourly total flow differs by year, season, month, and day of week, we will consider net flow as another metric to analyze station data. Net flow provides valuable insights into the dynamics of bike activity within a station, offering a nuanced understanding of the balance between incoming and outgoing bikes over time. The average hourly net flow, when aggregated by different temporal dimensions such as year, season, or month, serves as a key indicator of station popularity and usage patterns.\nA positive net flow indicates a higher influx of bikes, possibly suggesting that stations are more popular entry points, potentially located in busy or central areas.While negative net flow highlights stations with greater bike outflow, suggesting they are favored as exit points, possibly located near residential or recreational areas. Analyzing net flow trends over various time intervals allows for the identification of seasonal or monthly variations.\n\n3.3.1 Citi Bike Hourly Average Net Flow by Year, Month, Season, Day\nThe diverging bar charts below reveals that on average, net flow is negative across stations.\n\n\nCode\ndata_by_year_agg &lt;- data_by_year %&gt;%\n  filter(total_flow!= 0) %&gt;%\n  group_by(year) %&gt;%\n  summarize(\n    avg_inflow = mean(inflow, na.rm = TRUE),\n    avg_outflow = mean(outflow, na.rm = TRUE),\n    avg_netflow = mean(net_flow, na.rm = TRUE),   \n    avg_totalflow = mean(total_flow, na.rm = TRUE),\n    total_inflow = sum(inflow, na.arm = TRUE),\n    total_outflow = sum(outflow, na.arm = TRUE),\n    totalflow = sum(inflow, na.arm = TRUE)\n  )\n\nplot7 &lt;- data_by_year_agg %&gt;%\n  ggplot(aes(x = avg_netflow, y = factor(year), fill = factor(sign(avg_netflow)))) +\n  geom_bar(stat = \"identity\", position = \"stack\", color = \"white\", width = 0.7) +\n  labs(title = \"Average Net Flow By Year\",\n       x = \"\",\n       y = \"Year\") +\n  scale_fill_manual(values = c(\"-1\" = \"dodgerblue\", \"1\" = \"mediumseagreen\"), guide = FALSE) +\n  theme_minimal() +\n  theme(axis.title = element_text(face = \"bold\"),\n    plot.title = element_text(size = 15,\n        face = \"bold\", vjust = 0))\n\n# Show the plot\nplot8 &lt;- data_by_month_agg %&gt;%\n  ggplot(aes(x = avg_netflow, y = factor(month), fill = factor(sign(avg_netflow)))) +\n  geom_bar(stat = \"identity\", position = \"stack\", color = \"white\", width = 0.7) +\n  labs(title = \"Average Net Flow By Month\",\n       x = \"\",\n       y = \"Month\") +\n  scale_fill_manual(values = c(\"-1\" = \"dodgerblue\", \"1\" = \"mediumseagreen\"), guide = \"none\") +\n  theme_minimal() +\n  theme(axis.title = element_text(face = \"bold\"),\n    plot.title = element_text(size = 15,\n        face = \"bold\", vjust = 0))\n\n\ndata_by_weekdy_agg$weekday &lt;- fct_relevel(data_by_weekdy_agg$weekday, \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\")\n\nplot9 &lt;- data_by_weekdy_agg %&gt;%\n  ggplot(aes(x = avg_netflow, y = factor(weekday), fill = factor(sign(avg_netflow)))) +\n  geom_bar(stat = \"identity\", position = \"stack\", color = \"white\", width = 0.7) +\n  labs(title = \"Average Net Flow By Day of Week\",\n       x = \"Average Hourly Net Flow\",\n       y = \"Day\") +\n  scale_fill_manual(values = c(\"-1\" = \"dodgerblue\", \"1\" = \"mediumseagreen\"), guide = FALSE) +\n  theme_minimal() +\n    theme(axis.title = element_text(face = \"bold\"),\n    plot.title = element_text(size = 15,\n        face = \"bold\", vjust = 0))\n\n# Show the plot\n\nplot10 &lt;- data_by_season_agg %&gt;%\n  ggplot(aes(x = avg_netflow, y = factor(season), fill = factor(sign(avg_netflow)))) +\n  geom_bar(stat = \"identity\", position = \"stack\", color = \"white\", width = 0.7) +\n  labs(title = \"Average Net Flow By Season\",\n       x = \"Average Hourly Net Flow\",\n       y = \"Season\") +\n  scale_fill_manual(values = c(\"-1\" = \"dodgerblue\", \"1\" = \"mediumseagreen\"), guide = FALSE) +\n  theme_minimal() +\n    theme(axis.title = element_text(face = \"bold\"),\n    plot.title = element_text(size = 15,\n        face = \"bold\", vjust = 0))\n\nnf_plots &lt;- plot7 + plot8 + plot9 + plot10 +\n  plot_layout(ncol = 2, guides = 'collect', widths = c(1, 1)) \n\n\n\n# Display the combined plot\nprint(nf_plots)\n\n\nWarning: The `guide` argument in `scale_*()` cannot be `FALSE`. This was deprecated in\nggplot2 3.3.4.\nℹ Please use \"none\" instead."
  },
  {
    "objectID": "results.html#citi-bike-hourly-average-flow-by-neighborhood",
    "href": "results.html#citi-bike-hourly-average-flow-by-neighborhood",
    "title": "3  Results",
    "section": "3.4 Citi Bike Hourly Average Flow by Neighborhood",
    "text": "3.4 Citi Bike Hourly Average Flow by Neighborhood\nAs it is clear that Citi Bike average hourly flow remained consistent over the years, subject to some cyclical trends due to external factors such as weather and season, we will proceed with more interesting data exploration. More specifically, we are going to explore how growth is distributed across different neighborhoods and boroughs of New York.\n\n3.4.1 Hourly Average Flow by Neighborhood and Year\nThe following charts shows average hourly inflow and outlflow across stations from 2013 to October 2023, aggregated by neighborhood. The two plot gives us the same result, which is that activity, both inflow and outflow, is concentrated in Manhattan.The graph shows that the neighborhoods with the highest hourly average inflow of bikes to stations are all in Manhattan, followed by Brooklyn. Neighborhoods in the Bronx and Queens show very low activity.\n\n\nCode\n# Group by neighborhood and borough, summarize the data\ndata_by_year_nbhd &lt;- data_by_year_join_nbhd %&gt;%\n  filter(total_flow != 0) %&gt;%\n  group_by(neighborhood, borough) %&gt;%\n  summarize(\n    avg_inflow = mean(inflow, na.rm = TRUE),\n    avg_outflow = mean(outflow, na.rm = TRUE),\n    avg_netflow = mean(net_flow, na.rm = TRUE),   \n    avg_totalflow = mean(total_flow, na.rm = TRUE),\n    total_inflow = sum(inflow, na.rm = TRUE),\n    total_outflow = sum(outflow, na.rm = TRUE)\n  ) %&gt;%\n  ungroup()  \n\n# Remove rows where borough is NA\ndata_by_year_nbhd &lt;- data_by_year_nbhd %&gt;%\n  filter(!is.na(borough))\n\ndata_by_year_nbhd_in &lt;- data_by_year_nbhd %&gt;%\n  mutate(\n    borough = fct_reorder(borough, avg_inflow, .desc = TRUE),\n    neighborhood = fct_reorder(neighborhood, avg_inflow, .desc = TRUE)\n  )\n\ndata_by_year_nbhd_out &lt;- data_by_year_nbhd %&gt;%\n  mutate(\n    borough = fct_reorder(borough, avg_outflow, .desc = TRUE),\n    neighborhood = fct_reorder(neighborhood, avg_outflow, .desc = TRUE)\n  )\n\n\n# Plotting the data\nplot11 &lt;- data_by_year_nbhd_in %&gt;%\n  ggplot(aes(x = neighborhood, y = avg_inflow, fill = borough)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Hourly Inflow by Year\",\n       x = \" \",\n       y = \"Average Hourly Inflow\") +\n  theme_minimal() +\n  facet_wrap(~borough, ncol = 1) +\n  theme(axis.text.x = element_blank(), legend.position = \"none\",axis.title = element_text(face = \"bold\"),\n    plot.title = element_text(size = 15,\n        face = \"bold\", vjust = 0))\n\nplot11\n\n\n\n\n\n\n\nCode\nplot12 &lt;- data_by_year_nbhd_out %&gt;%\n  ggplot(aes(x = neighborhood, y = avg_outflow, fill = borough)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Hourly Outflow by Year\",\n       x = \" \",\n       y = \"Average Hourly Outflow\") +\n  theme_minimal() +\n  facet_wrap(~borough, ncol = 1) +\n  theme(axis.text.x = element_blank(), legend.position = \"none\",axis.title = element_text(face = \"bold\"),\n    plot.title = element_text(size = 15,\n        face = \"bold\", vjust = 0))\n\nplot12\n\n\n\n\n\n\n\n3.4.2 Hourly Average Flow by Neighborhood and Season\nAggregating by Neighborhood and Season emphasizes both seasonal trends and Manhattan’s leading position as the most popular exit and entry point.\n\n\nCode\n# Assuming your seasons are in a factor variable named 'season'\n# Make sure 'season' is a factor with levels arranged in the desired order\n\ndata_by_season_nbhd &lt;- data_by_season_join_nbhd %&gt;%\n  filter(total_flow != 0) %&gt;%\n  group_by(neighborhood, borough, season) %&gt;%\n  summarize(\n    avg_inflow = mean(inflow, na.rm = TRUE),\n    avg_outflow = mean(outflow, na.rm = TRUE),\n    avg_netflow = mean(net_flow, na.rm = TRUE),   \n    avg_totalflow = mean(total_flow, na.rm = TRUE),\n    total_inflow = sum(inflow, na.rm = TRUE),\n    total_outflow = sum(outflow, na.rm = TRUE)\n  ) %&gt;%\n  ungroup()  \n\n# Remove rows where borough is NA\ndata_by_season_nbhd &lt;- data_by_season_nbhd %&gt;%\n  filter(!is.na(borough))\n\ndata_by_season_nbhd_in &lt;- data_by_season_nbhd %&gt;%\n  mutate(\n    borough = fct_reorder(borough, avg_inflow, .desc = TRUE),\n    neighborhood = fct_reorder(neighborhood, avg_inflow, .desc = TRUE)\n  )\n\n\n# Plotting the data with faceting\nplot11 &lt;- data_by_season_nbhd_in %&gt;%\n  ggplot(aes(x = neighborhood, y = avg_inflow, fill = borough)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Avgerage Hourly Inflow by Season\",\n       x = \" \",\n       y = \"Average Hourly Inflow\") +\n  theme_minimal() +\n  facet_grid(borough ~ season) +\n  theme(axis.text.x = element_blank(), legend.position = \"none\", axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(size = 15, face = \"bold\", vjust = 0))\nplot11\n\n\n\n\n\n\n\nCode\ndata_by_season_nbhd_out &lt;- data_by_season_nbhd %&gt;%\n  mutate(\n    borough = fct_reorder(borough, avg_outflow, .desc = TRUE),\n    neighborhood = fct_reorder(neighborhood, avg_outflow, .desc = TRUE)\n  )\n\nplot12 &lt;- data_by_season_nbhd_out %&gt;%\n  ggplot(aes(x = neighborhood, y = avg_outflow, fill = borough)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Avg Hourly Outflow by Season\",\n       x = \" \",\n       y = \"Average Hourly Outflow\") +\n  theme_minimal() +\n  facet_grid(borough ~ season) +\n  theme(axis.text.x = element_blank(), legend.position = \"none\", axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(size = 15, face = \"bold\", vjust = 0))\n\nplot12\n\n\n\n\n\n\n\n3.4.3 Hourly Average Flow by Neighborhood and Day of Week\n\n\nCode\ndata_by_weekdy_nbhd &lt;- data_by_weekdy_join_nbhd %&gt;%\n  filter(total_flow != 0) %&gt;%\n  group_by(neighborhood, borough, weekday) %&gt;%\n  summarize(\n    avg_inflow = mean(inflow, na.rm = TRUE),\n    avg_outflow = mean(outflow, na.rm = TRUE),\n    avg_netflow = mean(net_flow, na.rm = TRUE),   \n    avg_totalflow = mean(total_flow, na.rm = TRUE),\n    total_inflow = sum(inflow, na.rm = TRUE),\n    total_outflow = sum(outflow, na.rm = TRUE)\n  ) %&gt;%\n  ungroup()  \n\n\n`summarise()` has grouped output by 'neighborhood', 'borough'. You can override\nusing the `.groups` argument.\n\n\nCode\n# Remove rows where borough is NA\ndata_by_weekdy_nbhd &lt;- data_by_weekdy_nbhd %&gt;%\n  filter(!is.na(borough))\n\ndata_by_weekdy_nbhd_in &lt;- data_by_weekdy_nbhd %&gt;%\n  mutate(\n    borough = fct_reorder(borough, avg_inflow, .desc = TRUE),\n    neighborhood = fct_reorder(neighborhood, avg_inflow, .desc = TRUE)\n  )\n\n# Plotting the data with faceting\nplot14 &lt;- data_by_weekdy_nbhd_in %&gt;%\n  ggplot(aes(x = neighborhood, y = avg_inflow, fill = borough)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Avg Hourly Inflow by Day\",\n       x = \" \",\n       y = \"Average Hourly Inflow\") +\n  theme_minimal() +\n  facet_grid(borough ~ fct_relevel(weekday, \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\")) +\n  theme(axis.text.x = element_blank(), legend.position = \"none\", axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(size = 15, face = \"bold\", vjust = 0))\n\nplot14\n\n\n\n\n\n\n\nCode\ndata_by_weekdy_nbhd_out &lt;- data_by_weekdy_nbhd %&gt;%\n  mutate(\n    borough = fct_reorder(borough, avg_outflow, .desc = TRUE),\n    neighborhood = fct_reorder(neighborhood, avg_outflow, .desc = TRUE))\n    \nplot15 &lt;- data_by_weekdy_nbhd_out %&gt;%\n  ggplot(aes(x = neighborhood, y = avg_outflow, fill = borough)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Avg Hourly Outflow by Day\",\n       x = \" \",\n       y = \"Average Hourly Outflow\") +\n  theme_minimal() +\n  facet_grid(borough ~ fct_relevel(weekday, \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\")) +\n  theme(axis.text.x = element_blank(), legend.position = \"none\", axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(size = 15, face = \"bold\", vjust = 0))\n\nplot15"
  },
  {
    "objectID": "results.html#citi-bike-hourly-average-net-flow-by-neighborhood",
    "href": "results.html#citi-bike-hourly-average-net-flow-by-neighborhood",
    "title": "3  Results",
    "section": "3.5 Citi Bike Hourly Average Net Flow by Neighborhood",
    "text": "3.5 Citi Bike Hourly Average Net Flow by Neighborhood\n\n3.5.1 Hourly Average Net flow by Neighborhood Over the Years\nIn the chart below, we plotted average hourly net flow over the years across stations, faceted by neighborhood. Again, we can see that the large majority of stations have a negative net flow, furthermore, this chart shows that the stations in Manhattan are by far the most popular.\n\n\nCode\n# Filter and reorder data\ndata_by_year_nbhd &lt;- data_by_year_nbhd %&gt;%\n  filter(avg_netflow != 0) %&gt;%\n  mutate(\n    borough = fct_reorder(borough, abs(avg_netflow), .desc = TRUE),\n    neighborhood = fct_reorder(neighborhood, abs(avg_netflow), .desc = FALSE)\n  )\n\n# Plotting the data with filtering inside ggplot\nplot16 &lt;- data_by_year_nbhd %&gt;%\n  filter(avg_netflow != 0) %&gt;%\n  ggplot(aes(x = avg_netflow, y = neighborhood, fill = borough)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Hourly Netflow Over the Years by Neighborhood\",\n       x = \" \",\n       y = \"Average Hourly Netflow\") +\n  theme_minimal() +\n  facet_wrap(~borough, ncol = 1, scales = \"free_y\") +\n  theme(legend.position = \"none\", strip.text = element_text(size = 15),  # Adjust the font size here\n        axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(size = 15, face = \"bold\", vjust = 0))\n\nplot16\n\n\n\n\n\n\n\n3.5.2 Hourly Average Net Flow by Neighborhood and Season\nThe following charts re-emphasize how average net flow is negative across seasons, stations, and neighborhoods. With Manhattan in the lead again, followed by Brooklyn. The neighborhoods with the highest net outflow are Central Park in Manhattan and Prospect Park in Brooklyn, followed by neighborhoods surrounding the parks and recreational areas like the Upper West Side, the Theatre District, Battery Park, Prospect Heights, to name a few.\nThis suggests that demand for Citi Bikes are higher in popular recreational areas, potentially as an activity rather than a means of transportation, but can also suggest that riders use the bikes to leave those popular areas.\nIn terms of station and bike re-balancing and bike availability, the data suggests that demand is excessive in those highlighted neighborhoods where situations with a shortage of bikes are more likely.\n\n\nCode\n# Filter and reorder data\ndata_by_season_nbhd &lt;- data_by_season_nbhd %&gt;%\n  filter(avg_netflow != 0) %&gt;%\n  mutate(\n    borough = fct_reorder(borough, abs(avg_netflow), .desc = TRUE),\n    neighborhood = fct_reorder(neighborhood, abs(avg_netflow), .desc = FALSE)\n  )\n\n# Plotting the data with filtering inside ggplot\nplot17 &lt;- data_by_season_nbhd %&gt;%\n  filter(avg_netflow != 0) %&gt;%\n  ggplot(aes(x = avg_netflow, y = neighborhood, fill = borough)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Hourly Netflow by Season\",\n       x = \" \",\n       y = \"Average Hourly Netflow\") +\n  theme_minimal() +\n  facet_grid(borough ~ season, scales = \"free_y\")  +\n  theme(legend.position = \"none\", strip.text = element_text(size = 15),  # Adjust the font size here\n        axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(size = 15, face = \"bold\", vjust = 0))\nplot17\n\n\n\n\n\n\n\n3.5.3 Hourly Average Net Flow by Neighborhood and Day of Week\n\n\nCode\n# Filter and reorder data\ndata_by_weekdy_nbhd &lt;- data_by_weekdy_nbhd %&gt;%\n  filter(avg_netflow != 0) %&gt;%\n  mutate(\n    borough = fct_reorder(borough, abs(avg_netflow), .desc = TRUE),\n    neighborhood = fct_reorder(neighborhood, abs(avg_netflow), .desc = FALSE)\n  )\n\n# Plotting the data with filtering inside ggplot\nplot18 &lt;- data_by_weekdy_nbhd %&gt;%\n  filter(avg_netflow != 0) %&gt;%\nggplot(aes(x = avg_netflow, y = neighborhood, fill = borough)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Average Hourly Netflow by Day\",\n       x = \" \",\n       y = \"Average Hourly Netflow\") +\n  theme_minimal() +\n  facet_grid(borough ~ fct_relevel(weekday, \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"),\n             scales = \"free_y\")  +\n  theme(legend.position = \"none\", strip.text = element_text(size = 15),  # Adjust the font size here\n        axis.title = element_text(face = \"bold\"),\n        plot.title = element_text(size = 15, face = \"bold\", vjust = 0))\n\nplot18"
  },
  {
    "objectID": "d3graph.html#yearly-comparison",
    "href": "d3graph.html#yearly-comparison",
    "title": "4  Interactive graph",
    "section": "4.1 Yearly Comparison",
    "text": "4.1 Yearly Comparison\n\nUtilize the slider to visualize the evolution of total flow values for Citi-Bikes across New York stations throughout the years of its service.\n\n\nSelect Year:   2013\n\n\n\n4.1.1 Hourly Average TOTAL Flow of Citi-Bikes Over the Years\n\n\nTotal Flow represents the sum of incoming and outgoing bike movements at each station.\n\n\n\n\n\n\n\n&lt; 2\n\n\n≥ 2 &amp\n\n\n≥ 5 &amp\n\n\n≥ 10\n\n\n≥ 15\n\n\n\n\n4.1.2 Hourly Average NET Flow of Citi-Bikes Over the Years\n\n\n\nNet Flow is defined as the difference between inflow and outflow. A negative netflow value of ‘x’ would suggest that approximately ‘x’ bikes will be disappearing from the station every hour.\n\n\n\n\n\n\n\n&lt; -0.3\n\n\n&lt; -0.2\n\n\n&lt; -0.1\n\n\n&lt; -0.01\n\n\n-0.01 to 0.01\n\n\n&gt; 0.01\n\n\n&gt; 0.1\n\n\n&gt; 0.2\n\n\n&gt; 0.3\n\n\n\nIn the upcoming charts, we employ a sequential color scheme where darker shades indicate higher values in the subsequent graphs."
  },
  {
    "objectID": "d3graph.html#weekly-comparison",
    "href": "d3graph.html#weekly-comparison",
    "title": "4  Interactive graph",
    "section": "4.2 Weekly Comparison",
    "text": "4.2 Weekly Comparison\nUtilize the slider to visualize the evolution of hourly average total flow traffic for Citi-Bikes across New York stations throughout the weekdays on between 2013 - 2023.\nSelect a Weekday:  Sunday\n\n\nThe graph illustrates how the Total Flow varies throughout the days of the week."
  },
  {
    "objectID": "d3graph.html#month-comparison",
    "href": "d3graph.html#month-comparison",
    "title": "4  Interactive graph",
    "section": "4.3 Month Comparison",
    "text": "4.3 Month Comparison\nUtilize the slider to visualize the evolution of hourly average total flow traffic for Citi-Bikes across New York stations throughout the months between 2013 - 2023.\nSelect Month:  January\n\n\nThe graph illustrates how the Total Flow changes throughout the months."
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "5  Conclusion",
    "section": "",
    "text": "As Citi Bike establishes itself as an invaluable player in New York’s transportation network, maintaining its quality, reliability, and accessibility is essential in guaranteeing its sustained growth. With the city making strides in supporting Citi Bike’s growth through investments in planning and infrastructure, understanding its current operational patterns is crucial. Trends related to time and location can guide quality control, bike re-balancing efforts, and in assessing ridership demands.\nOne clear result of our research is that a large majority of bike flow is in Manhattan. The concentration of bike inflow and outflow in Manhattan suggests that most Citi Bike trips end and begin in the borough. This is not necessarily surprising based on our broad understanding of ridership demographic at the company’s inception however, as our interactive maps indicate, Citi Bike has expanded its station network across the boroughs over the years. Considering the extensive station network expansion since launch, the disproportionate flow is fascinating and can be indicative of other factors related to station maintenance, pricing, affordability, etc. that may be worth addressing.\nAnother interesting result is that hourly average net flow is consistently negative across different time aggregations. This could be interpreted in several ways. Intuitively, net flow is a way to estimate demand across stations, however it is not as straight-forward as it may seem. Positive net flow does not necessarily indicate higher demand or popular destinations. In reality, stations with positive net flow suggest that many people end their rides around that location, and can simply mean that there are usually available docking spaces. On the other hand, Negative net flow suggests that many people start their rides at that location which could potentially indicate high demand in that area. It is clear that net flow is a nuanced metric and requires more analysis.\nOther notable trends are that ridership is higher in the Summer and Fall months and on weekdays. The most popular origins and destinations are mostly in Manhattan but, in general, they are around transit areas such as Penn Station and Port Authority, and around popular recreational hubs like Central Park and neighboring areas like the Upper West Side.\nAs we moved forward with our analysis, it became clear that we were limited by our data. As our data was based on hourly averages across different time frames, we were unable to visualize more granular data such as actual trip numbers, where trips began and end, trip duration, rider demographics, all of which could have provided insightful results. While our analysis was interesting and insightful, this has only inspired more in-depth investigations of Citi Bike’s role and impact in New York."
  }
]